/*************************************************************
  This example shows how you can control a DFPlayer MP3 module
  on ESP8266 using Blynk (music player widget) and a Wifi connection

  Hardware:
    - ESP8266 based module e.g. NodeMCU
    - DFPlayer Mini MP3 player 

  App project setup:
  - Button widget attached to V4 :Play track button: OFF value=0, ON value=tracknr
  - Music Player widget attached to V5: shows current tracknr
  - Slider widget attached to V6 : Volume slider: range 0-30
  - Menu settings widget attached to V7: Equaliser selector: values
     1 Normal
     2 Pop
     3 Rock
     4 Jazz
     5 Classic
     6 Bass

   Necessary libraries
    - Blynk:   https://github.com/blynkkk/blynk-library/releases/latest
    - DFPlay:  https://github.com/rwpalmer/DFPlay

 
 *************************************************************/

/* Comment this out to disable prints and save space */
#define BLYNK_PRINT Serial

#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>
#include <SoftwareSerial.h>


#include <SimpleTimer.h>  //https://github.com/jfturcot/SimpleTimer
#include <modbus.h>       //https://github.com/andresarmento/modbus-arduino
#include <modbusDevice.h> //https://github.com/jossef/arduino-modbus-slave
#include <modbusRegBank.h>
#include <modbusSlave.h>
#include  <SoftwareSerial.h>// Modbus RTU pins   D7(13),D8(15)   RX,TX

modbusDevice regBank;
modbusSlave slave;
// D5 is RX of ESP8266, connect to TX of DFPlayer
// D6 is TX of ESP8266, connect to RX of DFPlayer module
SoftwareSerial mySoftwareSerial(D5, D6);

//include "DFPlay.h"
#include "DFRobotDFPlayerMini.h"
#include "SoftwareSerial.h"
DFRobotDFPlayerMini myDFPlayer;

// You should get Auth Token in the Blynk App.
// Go to the Project Settings (nut icon).
char auth[] = "96ea7efc98b4443a85d1e93a442de86c";

// Your WiFi credentials.
// Set password to "" for open networks.
char ssid[] = "Hoang Trang";
char pass[] = "hoangtrang";

#define PLAY_MODE_OFF         0
#define PLAY_MODE_TRACK       1
#define PLAY_MODE_ALL         2
int playmode = PLAY_MODE_OFF;

#define DFPLAY_MEDIA_USB 1
#define DFPLAY_MEDIA_SD  2

#define VPIN_PLAYTRACK   V4
#define VPIN_MUSICPLAYER V5
#define VPIN_VOLUME      V6
#define VPIN_EQUALIZER   V7

int currentTrackCount = -1;
int Floder = -1;
int song = 0;
int control = -1;
int vl;
String SetAlarm = "";
String NotAlarm = "";


BLYNK_CONNECTED() {
  // Synchronize volume & equalizer of DFPlayer with Blynk widgets
  Blynk.syncVirtual(VPIN_VOLUME);
  Blynk.syncVirtual(VPIN_EQUALIZER);

  // Update music player widget (play/stop button and label) based on state DFPlayer
  if (currentTrackCount >= 0)
  {
    String trackcountString(currentTrackCount + 1); // Start with 1 instead of 0 in user interface
    Blynk.virtualWrite(VPIN_MUSICPLAYER, "play");
    Blynk.setProperty(VPIN_MUSICPLAYER, "label", trackcountString);
  }
  else
  {
    Blynk.virtualWrite(VPIN_MUSICPLAYER, "stop");
    Blynk.setProperty(VPIN_MUSICPLAYER, "label", " ");
  }
}

BLYNK_WRITE(VPIN_PLAYTRACK)
{
  int tracknr = param.asInt();
#ifdef BLYNK_PRINT
  BLYNK_PRINT.print("BLYNK_WRITE(VPIN_PLAYTRACK): ");
  BLYNK_PRINT.println(tracknr);
#endif

  if (tracknr > 0)
  {
    String trackcountString(tracknr);
    myDFPlayer.play(DFPLAY_MEDIA_SD, 0, tracknr); // Plays tracknr in root folder on SD-card
    song = track;
    playmode = PLAY_MODE_TRACK;
    currentTrackCount = -1;
    Blynk.setProperty(VPIN_MUSICPLAYER, "label", trackcountString);
    Blynk.virtualWrite(VPIN_MUSICPLAYER, "play");
  }
}


BLYNK_WRITE(VPIN_MUSICPLAYER)
{
  String action = param.asStr();
#ifdef BLYNK_PRINT
  BLYNK_PRINT.print("BLYNK_WRITE(VPIN_MUSICPLAYER): ");
  BLYNK_PRINT.println(action);
#endif

  if (action == "play") {
    myDFPlayer.play(DFPLAY_MEDIA_SD); // Plays all tracks in root folder of SD-card
    playmode = PLAY_MODE_ALL;
    control = 0;
  }
  if (action == "stop") {
    myDFPlayer.stop();
    control = 1;
  }
  if (action == "next") {
    myDFPlayer.skip();
    control = 2;
  }
  if (action == "prev") {
    myDFPlayer.back();
    control = 3;
  }
}

BLYNK_WRITE(VPIN_VOLUME)
{
  int paramVol = param.asInt();
  uint8_t volume = constrain(paramVol, 0, 30);
#ifdef BLYNK_PRINT
  BLYNK_PRINT.print("BLYNK_WRITE(VPIN_VOLUME): ");
  BLYNK_PRINT.println(paramVol);
  vl = paramVol;
#endif

  myDFPlayer.setVolume(volume);
}

BLYNK_WRITE(VPIN_EQUALIZER)
{
  int paramEq = param.asInt();
  uint8_t eq = constrain(paramEq, 1, 6) - 1; // Blynk starts with 1, setEqualizer starts with 0

#ifdef BLYNK_PRINT
  BLYNK_PRINT.print("BLYNK_WRITE(VPIN_EQUALIZER): ");
  BLYNK_PRINT.println(paramEq);
  Floder = paramEq;
#endif

  myDFPlayer.setEqualizer(eq);
}

void updatePlayerState()
{
  int trackcount;

  if (myDFPlayer.isPlaying())
  {
    trackcount = (int)myDFPlayer.getTrackCount();
  }
  else
  {
    trackcount = -1;
    playmode = PLAY_MODE_OFF;
  }

  if (trackcount != currentTrackCount)
  {
    switch (playmode)
    {
      case PLAY_MODE_OFF:
        Blynk.setProperty(VPIN_MUSICPLAYER, "label", " ");
        Blynk.virtualWrite(VPIN_MUSICPLAYER, "stop");
        break;


      case PLAY_MODE_ALL:
        String trackcountString(trackcount + 1); // Start with 1 instead of 0 in user interface
        Blynk.setProperty(VPIN_MUSICPLAYER, "label", trackcountString);
        Blynk.virtualWrite(VPIN_MUSICPLAYER, "play");
        break;
    }

    currentTrackCount = trackcount;
  }
}

void setup()
{
  // Debug console
#ifdef BLYNK_PRINT
  BLYNK_PRINT.begin(115200);
  BLYNK_PRINT.println("Waiting for connections...");
#endif

  mySoftwareSerial.begin(9600);
  myDFPlayer.begin(mySoftwareSerial);          // Prepares DFPlay for execution

  Blynk.begin(auth, ssid, pass);
  // You can also specify server:
  //Blynk.begin(auth, ssid, pass, "blynk-cloud.com", 80);
  //Blynk.begin(auth, ssid, pass, IPAddress(192,168,1,100), 8080);
  timer.setInterval(1000L, processes);//Real sensor in 1s
	//Assign the modbus device ID.  
	regBank.setId(1);
// Holding registers  
  regBank.add(40005); 
  regBank.add(40006); 
  regBank.add(40007); 
  regBank.add(40008); 
  regBank.add(40009); 
  regBank.add(400010); 
  
  slave._device = &regBank;  
 
  Serial.begin(9600);
  delay(100);
// Initialize the serial port for coms at 9600 baud  
  slave.setBaud(9600);
  delay(100);
  Serial.println("Connected "); 
  Serial.println("Modbus RTU Slave Online");
}


void loop()
{
  Blynk.run();
  myDFPlayer.manageDevice(); // Sends requests to DFPlayer & processes responses.
  updatePlayerState();

  SetAlarm = String(SGio)+ ":" +String(SPhut)+ ":" +String(SGiay);
  NotAlarm = String(FGio)+ ":" +String(FPhut)+ ":" +String(FGiay);
  // Set Alarm
  Serial.println("Set Alarm music: ");
  Serial.print(SetAlarm);
  regBank.set(40005,SetAlarm);
  delay(20);
  
  // Not Alarm
  Serial.println("Not Alarm music: ");
  Serial.print(NotAlarm);
  regBank.set(40006,NotAlarm);
  delay(20);
  
  // Set volume music
  Serial.println("Volume music: ");
  Serial.print(vl);
  regBank.set(40007,vl);
  delay(20);
  
  // Set control music
  Serial.println("Control music: ");
  Serial.print(control);
  regBank.set(40008,control);
  delay(20);

    // Set Floder music
  Serial.println("Floder music: ");
  Serial.print(Floder);
  regBank.set(40009,Floder);
  delay(20);
  slave.run();
  timer.run();
  
    // Set Song music
  Serial.println("Song music: ");
  Serial.print(song);
  regBank.set(400010,song);
  delay(20);
  slave.run();
  timer.run();
}